package com.exponea.sdk.view

import android.app.Dialog
import android.content.Context
import android.graphics.Color
import android.graphics.drawable.ColorDrawable
import android.os.Bundle
import android.util.TypedValue
import android.view.LayoutInflater
import android.view.View
import android.view.WindowManager
import android.widget.Button
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.constraintlayout.widget.ConstraintSet
import com.exponea.sdk.R
import com.exponea.sdk.databinding.InAppMessageDialogBinding
import com.exponea.sdk.models.InAppMessageButtonType
import com.exponea.sdk.models.InAppMessagePayload
import com.exponea.sdk.models.InAppMessagePayload.Companion.parseColor
import com.exponea.sdk.models.InAppMessagePayload.Companion.parseFontSize
import com.exponea.sdk.models.InAppMessagePayloadButton
import com.exponea.sdk.models.TextPosition
import com.exponea.sdk.repository.DrawableCache
import com.exponea.sdk.util.setBackgroundColor

internal class InAppMessageDialog(
    context: Context,
    private val fullScreen: Boolean,
    private val payload: InAppMessagePayload,
    private val imageCache: DrawableCache,
    private val onButtonClick: (InAppMessagePayloadButton) -> Unit,
    private var onDismiss: ((Boolean, InAppMessagePayloadButton?) -> Unit)?,
    private val onError: (String) -> Unit
) : InAppMessageView, Dialog(context) {

    private val binding: InAppMessageDialogBinding =
        InAppMessageDialogBinding.inflate(LayoutInflater.from(context))

    override val isPresented: Boolean
        get() = isShowing

    init {
        setContentView(binding.root)
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setupPositions()
        setupFullscreen()
        setupImage()
        setupCloseButton()
        setupTitleText()
        setupBodyText()
        setupButtons()
        setupWindow()

        setOnDismissListener {
            this.onDismiss?.invoke(false, null)
        }
    }

    private fun setupFullscreen() {
        val padding = if (fullScreen) {
            context.resources.getDimensionPixelSize(R.dimen.exponea_sdk_in_app_message_fullscreen_padding)
        } else {
            context.resources.getDimensionPixelSize(R.dimen.exponea_sdk_in_app_message_dialog_padding)
        }
        binding.inAppMessageDialogContainer.setPadding(padding, padding, padding, padding)

        val rootParams = binding.inAppMessageDialogRoot.layoutParams as ConstraintLayout.LayoutParams
        val imageParams = binding.imageViewImage.layoutParams as ConstraintLayout.LayoutParams
        if (fullScreen) {
            rootParams.matchConstraintMaxWidth = -1
            rootParams.height = ConstraintLayout.LayoutParams.MATCH_PARENT
            imageParams.height = 0
        } else {
            imageParams.constrainedHeight = true
        }
    }

    private fun setupPositions() {
        val constraintSet = ConstraintSet()
        constraintSet.clone(binding.inAppMessageDialogRoot)
        constraintSet.removeFromVerticalChain(binding.linearLayoutBackground.id)
        constraintSet.removeFromVerticalChain(binding.imageViewImage.id)

        if (payload.isTextOverImage == true) {
            constraintSet.connect(
                binding.imageViewImage.id,
                ConstraintSet.TOP,
                ConstraintSet.PARENT_ID,
                ConstraintSet.TOP
            )
            constraintSet.connect(
                binding.imageViewImage.id,
                ConstraintSet.BOTTOM,
                ConstraintSet.PARENT_ID,
                ConstraintSet.BOTTOM
            )
            constraintSet.connect(
                binding.linearLayoutBackground.id,
                if (payload.textPosition == TextPosition.TOP) ConstraintSet.TOP else ConstraintSet.BOTTOM,
                ConstraintSet.PARENT_ID,
                if (payload.textPosition == TextPosition.TOP) ConstraintSet.TOP else ConstraintSet.BOTTOM
            )
        } else {
            val imageAtTop = payload.textPosition != TextPosition.BOTTOM
            constraintSet.connect(
                if (imageAtTop) binding.imageViewImage.id else binding.linearLayoutBackground.id,
                ConstraintSet.TOP,
                ConstraintSet.PARENT_ID,
                ConstraintSet.TOP
            )
            constraintSet.connect(
                binding.imageViewImage.id,
                if (imageAtTop) ConstraintSet.TOP else ConstraintSet.BOTTOM,
                binding.linearLayoutBackground.id,
                if (imageAtTop) ConstraintSet.BOTTOM else ConstraintSet.TOP
            )
            constraintSet.connect(
                binding.linearLayoutBackground.id,
                if (imageAtTop) ConstraintSet.BOTTOM else ConstraintSet.TOP,
                binding.imageViewImage.id,
                if (imageAtTop) ConstraintSet.TOP else ConstraintSet.BOTTOM
            )
            constraintSet.connect(
                if (imageAtTop) binding.linearLayoutBackground.id else binding.imageViewImage.id,
                ConstraintSet.BOTTOM,
                ConstraintSet.PARENT_ID,
                ConstraintSet.BOTTOM
            )
        }
        constraintSet.applyTo(binding.inAppMessageDialogRoot)
    }

    private fun setupImage() {
        binding.imageViewImage.isOnTop = payload.textPosition == TextPosition.BOTTOM
        binding.imageViewImage.textOverImage = payload.isTextOverImage == true
        imageCache.showImage(
            payload.imageUrl,
            binding.imageViewImage,
            onImageNotLoaded = {
                onError("Image '${payload.imageUrl}' not loaded successfully")
                onDismiss = null
                dismiss()
            }
        )
    }

    private fun setupTitleText() {
        if (payload.title.isNullOrEmpty()) {
            binding.textViewTitle.visibility = View.GONE
        } else {
            binding.textViewTitle.text = payload.title
            binding.textViewTitle.setTextColor(parseColor(payload.titleTextColor, Color.BLACK))
            binding.textViewTitle.setTextSize(TypedValue.COMPLEX_UNIT_DIP, parseFontSize(payload.titleTextSize, 22f))
        }
    }

    private fun setupBodyText() {
        if (payload.bodyText.isNullOrEmpty()) {
            binding.textViewBody.visibility = View.GONE
        } else {
            binding.textViewBody.text = payload.bodyText
            binding.textViewBody.setTextColor(parseColor(payload.bodyTextColor, Color.BLACK))
            binding.textViewBody.setTextSize(TypedValue.COMPLEX_UNIT_DIP, parseFontSize(payload.bodyTextSize, 14f))
        }
    }

    private fun setupCloseButton() {
        binding.buttonClose.setOnClickListener {
            dismissMessageWithClosingInteraction(null)
        }
        binding.buttonClose.setTextColor(parseColor(payload.closeButtonColor, Color.WHITE))
    }

    private fun dismissMessageWithClosingInteraction(buttonPayload: InAppMessagePayloadButton?) {
        onDismiss?.invoke(true, buttonPayload)
        onDismiss = null
        dismiss()
    }

    private fun setupButtons() {
        val buttons = payload.buttons ?: emptyList()
        setupButton(binding.buttonAction1, buttons.getOrNull(0), buttons.size)
        setupButton(binding.buttonAction2, buttons.getOrNull(1), buttons.size)
    }

    private fun setupButton(buttonAction: Button, buttonPayload: InAppMessagePayloadButton?, buttonsCount: Int) {
        if (buttonPayload == null) {
            binding.buttonSpace.visibility = View.GONE
            buttonAction.visibility = View.GONE
            return
        }
        val buttonWidthRes = if (buttonsCount == 2) {
            R.dimen.exponea_sdk_in_app_message_max_buttons_width
        } else {
            R.dimen.exponea_sdk_in_app_message_max_button_width
        }
        buttonAction.maxWidth = context.resources.getDimensionPixelSize(buttonWidthRes)
        buttonAction.text = buttonPayload.buttonText
        buttonAction.setTextColor(parseColor(buttonPayload.buttonTextColor, Color.BLACK))
        buttonAction.setBackgroundColor(
            R.drawable.in_app_message_dialog_button,
            parseColor(buttonPayload.buttonBackgroundColor, Color.LTGRAY)
        )
        buttonAction.setOnClickListener {
            if (buttonPayload.buttonType == InAppMessageButtonType.CANCEL) {
                dismissMessageWithClosingInteraction(buttonPayload)
            } else {
                onButtonClick(buttonPayload)
                onDismiss = null
                dismiss()
            }
        }
    }

    private fun setupWindow() {
        window?.apply {
            setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
            if (payload.isTextOverImage == true) {
                binding.linearLayoutBackground.setBackgroundColor(Color.TRANSPARENT)
            } else {
                val backgroundDrawable = if (payload.textPosition == TextPosition.BOTTOM)
                    R.drawable.in_app_message_dialog_background_bottom
                else R.drawable.in_app_message_dialog_background_top
                binding.linearLayoutBackground.setBackgroundColor(
                    backgroundDrawable,
                    parseColor(payload.backgroundColor, Color.WHITE)
                )
            }
            attributes = attributes?.apply {
                width = WindowManager.LayoutParams.MATCH_PARENT
                height = WindowManager.LayoutParams.MATCH_PARENT
                dimAmount = 0.5f
            }
        }
    }
}
