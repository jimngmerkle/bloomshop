package com.exponea.example.view

import android.content.Context
import android.content.Intent
import android.os.Bundle
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import com.exponea.example.R
import com.exponea.example.databinding.ActivityMainBinding
import com.exponea.example.services.ExampleAppInboxProvider
import com.exponea.example.view.BottomTab.*
import com.exponea.example.view.fragments.*
import com.exponea.sdk.Exponea
import com.exponea.sdk.models.*
import com.exponea.sdk.util.Logger
import com.exponea.sdk.util.isResumedActivity
import com.exponea.sdk.util.isViewUrlIntent

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        setSupportActionBar(binding.toolbar)
        supportActionBar?.title = "Examples"

        // Set up SDK
        Exponea.loggerLevel = Logger.Level.VERBOSE
        Exponea.checkPushSetup = true
        Exponea.handleCampaignIntent(intent, applicationContext)
        Exponea.appInboxProvider = ExampleAppInboxProvider()

        if (Exponea.isInitialized) {
            setupListeners()
        } else {
            startActivity(Intent(this, AuthenticationActivity::class.java))
            finish()
            return
        }

        val deeplinkDestination = resolveDeeplinkDestination(intent)
        if (deeplinkDestination != null) {
            handleDeeplinkDestination(deeplinkDestination)
        } else if (savedInstanceState == null) {
            selectTab(Fetch)
        }
    }

    override fun onNewIntent(intent: Intent?) {
        super.onNewIntent(intent)
        val deeplinkDestination = resolveDeeplinkDestination(intent)
        if (deeplinkDestination != null) {
            handleDeeplinkDestination(deeplinkDestination)
        }
    }

    private fun setupListeners() {
        binding.navigation.setOnNavigationItemSelectedListener {
            when (it.itemId) {
                R.id.actionMain -> replaceFragment(FetchFragment())
                R.id.actionPurchase -> replaceFragment(TrackFragment())
                R.id.actionAnonymize -> replaceFragment(AnonymizeFragment())
                R.id.actionInAppContentBlock -> replaceFragment(InAppContentBlocksFragment())
                else -> replaceFragment(FlushFragment())
            }
        }
    }

    private fun selectTab(tab: BottomTab) {
        binding.navigation.selectedItemId = when (tab) {
            Anonymize -> R.id.actionAnonymize
            Fetch -> R.id.actionMain
            Manual -> R.id.actionSettings
            Track -> R.id.actionPurchase
            InAppContentBlock -> R.id.actionInAppContentBlock
        }

        val fragment = when (tab) {
            Anonymize -> AnonymizeFragment()
            Fetch -> FetchFragment()
            Manual -> FlushFragment()
            Track -> TrackFragment()
            InAppContentBlock -> InAppContentBlocksFragment()
        }

        supportFragmentManager.beginTransaction()
            .replace(R.id.container, fragment)
            .commit()
    }

    private fun replaceFragment(fragment: androidx.fragment.app.Fragment): Boolean {
        supportFragmentManager.beginTransaction()
            .replace(R.id.container, fragment)
            .commit()
        return true
    }

    private fun resolveDeeplinkDestination(intent: Intent?): DeeplinkDestination? {
        fun String.toDeeplinkDestination() = when {
            this.contains("track") -> DeeplinkDestination.Track
            this.contains("flush") -> DeeplinkDestination.Manual
            this.contains("fetch") -> DeeplinkDestination.Fetch
            this.contains("inappcb") -> DeeplinkDestination.InAppCb
            this.contains("anonymize") -> DeeplinkDestination.Anonymize
            else -> null
        }

        return if (intent.isViewUrlIntent("http")) {
            intent?.data?.path.orEmpty().toDeeplinkDestination()
        } else if (intent.isViewUrlIntent("exponea")) {
            intent?.data?.path.orEmpty().toDeeplinkDestination()
        } else {
            null
        }
    }

    private fun handleDeeplinkDestination(deeplinkDestination: DeeplinkDestination) {
        when (deeplinkDestination) {
            DeeplinkDestination.Anonymize -> selectTab(Anonymize)
            DeeplinkDestination.Fetch -> selectTab(Fetch)
            DeeplinkDestination.Manual -> selectTab(Manual)
            DeeplinkDestination.Track -> selectTab(Track)
            DeeplinkDestination.InAppCb -> selectTab(InAppContentBlock)
        }
    }
}
